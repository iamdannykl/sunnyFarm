#if TOOLS
using Godot;
using System;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;
using System.IO;
using System.Text;
using SunnyFarm.code.Equipments;

[Tool]
public partial class EquipmentRegistryPlugin : EditorPlugin
{
    private Button _button;

    public override void _EnterTree()
    {
        _button = new Button { Text = "生成装备注册表" };
        _button.Pressed += OnGeneratePressed;
        AddControlToContainer(CustomControlContainer.Toolbar, _button);
    }

    public override void _ExitTree()
    {
        RemoveControlFromContainer(CustomControlContainer.Toolbar, _button);
        _button.QueueFree();
    }

    private void OnGeneratePressed()
    {
        GD.Print("开始扫描 Equipment 类...");

        Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
        var types = assemblies
            .SelectMany(a => a.GetTypes())
            .Where(t => typeof(IEquipment).IsAssignableFrom(t) && !t.IsAbstract)
            .Select(t => new
            {
                Type = t,
                Attr = t.GetCustomAttribute<EquipmentAttribute>()
            })
            .Where(x => x.Attr != null)
            .ToList();

        if (types.Count == 0)
        {
            GD.Print("未找到任何带有 EquipmentAttribute 的类！");
            return;
        }

        // 构建静态类代码
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine("// 此文件由 EquipmentRegistryPlugin 自动生成，请勿手动修改");
        sb.AppendLine("// </auto-generated>");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine();
        sb.AppendLine("public static class EquipmentRegistry");
        sb.AppendLine("{");
        sb.AppendLine("    public static readonly Dictionary<string, Type> Map = new Dictionary<string, Type>()");
        sb.AppendLine("    {");

        foreach (var x in types)
        {
            GD.Print($"发现装备: {x.Attr.Id} => {x.Type.FullName}");
            sb.AppendLine($"        {{ \"{x.Attr.Id}\", typeof({x.Type.FullName}) }},");
        }

        sb.AppendLine("    };");
        sb.AppendLine("}");

        // 保存文件
        string savePath = "res://Scripts/AutoGenerated/EquipmentRegistry.cs"; // 可按需修改路径
        string absPath = ProjectSettings.GlobalizePath(savePath);

        Directory.CreateDirectory(System.IO.Path.GetDirectoryName(absPath));
        File.WriteAllText(absPath, sb.ToString());

        GD.Print($"已写入注册表到: {savePath}");
    }
}
#endif
